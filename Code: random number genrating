from qiskit import Aer, transpile
from qiskit.visualization import plot_bloch_multivector

def execute(circuit, shots):
    backend = Aer.get_backend("qasm_simulator")
    results = backend.run(transpile(circuit, backend), shots = shots).result()
    return results.get_counts()

def visualize_the_system(circuit):
    backend = Aer.get_backend("statevector_simulator")
    results = backend.run(transpile(circuit, backend)).result()
    display(plot_bloch_multivector(results.get_statevector()))

from qiskit import QuantumCircuit
import numpy as np
from qiskit import Aer, transpile
from qiskit import ClassicalRegister
from qiskit import QuantumRegister
qreg = QuantumRegister(500)
creg = ClassicalRegister(500)
qc = QuantumCircuit(qreg, creg)
for i in range(0, 499):
  qc.h(i)
  qc.measure(i, i)
execute(qc, shots =1) 


# after to add noisy backend 

#from qiskit.providers.fake_provider import FakeManila
#from qiskit.visualization import plot_histogram
#backend = FakeManila()
#results = backend.run(transpile(qc, backend), shots =1).result()
#counts = results.get_counts()
#plot_histogram(counts)
